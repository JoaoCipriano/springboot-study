openapi: 3.0.3
servers:
  - url: 'http://localhost:8080'
info:
  title: spring-boot-study
  version: 1.0.0
paths:
  /auth/register:
    post:
      tags:
        - Authentication
      operationId: register
      summary: Register a user
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '200':
          description: Response to the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /auth/authenticate:
    post:
      tags:
        - Authentication
      summary: Authenticate a user
      operationId: authenticate
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/AuthenticationRequest'
      responses:
        '200':
          description: Response to the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /auth/refresh-token:
    post:
      tags:
        - Authentication
      summary: Refresh the token
      operationId: refreshToken
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: Response to the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthenticationResponse'
  /auth/forgot:
    post:
      tags:
        - Authentication
      summary: Forgot the password
      operationId: forgot
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/ForgotPasswordRequest'
      responses:
        '204':
          description: 'The new password has been sent'

  /categories/{id}:
    get:
      tags:
        - Category
      operationId: getById
      summary: Retrieve a category by ID
      parameters:
        - name: id
          in: 'path'
          description: Category ID
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Response to the message
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
    put:
      tags:
        - Category
      operationId: update
      summary: Update an existing category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '204':
          description: The category has been updated successfully
    delete:
      tags:
        - Category
      operationId: delete
      summary: Remove an existing category
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Category has been removed successfully
  /categories:
    get:
      tags:
        - Category
      operationId: findAll
      summary: Retrieve all categories
      responses:
        '200':
          description: Response to the message
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'
    post:
      tags:
        - Category
      operationId: create
      summary: Create a new category
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        '201':
          description: Category has been created successfully
  /categories/pages:
    get:
      tags:
        - Category
      operationId: findPageableCategory
      summary: Returns a category page
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: linesPerPage
          in: query
          required: false
          schema:
            type: integer
            default: 24
        - name: orderBy
          in: query
          required: false
          schema:
            type: string
            default: name
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [ ASC, DESC ]
            default: ASC
      responses:
        '200':
          description: Categories page has been found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageableCategoryResponse'

  /customers:
    post:
      tags:
        - Customer
      operationId: save
      summary: Insert a new customer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '201':
          description: Created
  /customers/{id}:
    get:
      tags:
        - Customer
      operationId: findById
      summary: Returns a customer by ID
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: The Customer has been found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
    put:
      tags:
        - Customer
      operationId: updateById
      summary: Update an existing customer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerRequest'
      responses:
        '204':
          description: No Content
    delete:
      tags:
        - Customer
      operationId: deleteById
      summary: Delete a customer
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: No Content
  /customers/pages:
    get:
      tags:
        - Customer
      operationId: findPageableCustomer
      summary: Returns a customers page
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            default: 0
        - name: linesPerPage
          in: query
          required: false
          schema:
            type: integer
            default: 24
        - name: orderBy
          in: query
          required: false
          schema:
            type: string
            default: name
        - name: direction
          in: query
          required: false
          schema:
            type: string
            enum: [ ASC, DESC ]
            default: ASC
      responses:
        '200':
          description: Customers page has been found successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageableCustomerResponse'
  /customers/{email}:
    get:
      tags:
        - Customer
      operationId: findByEmail
      summary: Find customer by email
      parameters:
        - name: email
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerResponse'
  /customers/pictures:
    post:
      tags:
        - Customer
      operationId: uploadProfilePicture
      summary: Upload a profile picture
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '201':
          description: Created
components:
  schemas:
    MessageResponse:
      properties:
        text:
          type: string
    RegisterRequest:
      properties:
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
    AuthenticationRequest:
      properties:
        email:
          type: string
        password:
          type: string
    AuthenticationResponse:
      properties:
        token:
          type: string
    ForgotPasswordRequest:
      required:
        - email
      properties:
        email:
          type: string
          format: email
    CategoryResponse:
      properties:
        id:
          type: string
        name:
          type: string
        products:
          type: array
          items:
            type: object
            $ref: '#/components/schemas/ProductResponse'
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
          minLength: 5
          maxLength: 80
    PageableCategoryResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponse'
        totalPages:
          type: integer
          format: int32
        totalElements:
          type: integer
          format: int64
    ProductResponse:
      properties:
        id:
          type: string
        name:
          type: string
        price:
          type: number
    CustomerResponse:
      type: object
      properties:
        id:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        socialId:
          type: string
        type:
          $ref: '#/components/schemas/CustomerTypeResponse'
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressResponse'
        phones:
          type: array
          items:
            type: string
    CustomerTypeResponse:
      type: string
      enum:
        - NATURAL_PERSON
        - LEGAL_PERSON
    AddressResponse:
      type: object
      properties:
        id:
          type: integer
        publicPlace:
          type: string
        number:
          type: string
        complement:
          type: string
        neighborhood:
          type: string
        zipCode:
          type: string
        city:
          type: string
    PageableCustomerResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CustomerResponse'
        totalPages:
          type: integer
        totalElements:
          type: integer
          format: int64
    CustomerRequest:
      type: object
      properties:
        firstName:
          type: string
          minLength: 5
          maxLength: 120
        lastName:
          type: string
          minLength: 5
          maxLength: 120
        email:
          type: string
          format: email
        socialId:
          type: string
        type:
          type: integer
        password:
          type: string
        addresses:
          type: array
          items:
            $ref: '#/components/schemas/AddressRequest'
        phones:
          type: array
          items:
            type: string
      required:
        - firstName
        - lastName
        - email
        - socialId
        - password
        - addresses
        - phones
    AddressRequest:
      type: object
      properties:
        publicPlace:
          type: string
        number:
          type: string
        complement:
          type: string
        neighborhood:
          type: string
        zipCode:
          type: string
      required:
        - publicPlace
        - number
        - zipCode
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT